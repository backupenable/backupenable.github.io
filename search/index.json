[{"content":"经典 NP 难问题详解 1.0-1 背包问题 问题描述： 给定一组物品，每个物品有自己的重量和价值，在限定的总重量内，我们需要选择其中若干个物品，使得所选物品的总价值最大。每个物品只能选择一次（0-1 选择）。\n算法思想： 使用动态规划，通过构建一个二维数组来存储子问题的解，逐步递推得到最终结果。\n动态规划解法步骤：\n定义状态：$dp [i][w] $表示考虑前 i 个物品，背包容量为 w 时的最大价值。\n状态转移方程：$dp [i][w] = max (dp [i-1][w], dp [i-1][w-weights [i-1]] + values [i-1])$，其中 $weights [i-1]$ 和 $values [i-1]$ 分别是第 i 个物品的重量和价值。\n初始条件：$dp [0][w] = 0（$没有物品时），$dp [i][0] = 0$（背包容量为 0 时）。\n最终结果：$dp [n][W]，$其中 n 是物品数量，W 是背包容量。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def knapsack(weights, values, capacity): n = len(weights) # 创建二维数组dp dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] # 填充dp数组 for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i-1] \u0026lt;= w: # 选择当前物品或不选择，取最大值 dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1]) else: # 当前物品重量超过背包容量，不能选择 dp[i][w] = dp[i-1][w] # 返回最大价值 return dp[n][capacity] # 示例 weights = [2, 3, 4, 5] values = [3, 4, 5, 6] capacity = 8 print(knapsack(weights, values, capacity)) # 输出: 10 2.旅行商问题 (TSP) 问题描述： 给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短路径。\n算法思想： 使用动态规划，通过状态压缩表示已访问的城市集合，递推计算从当前城市到终点的最短路径。\n动态规划解法步骤：\n定义状态：$dp [mask][i]$ 表示已访问城市集合为 mask，当前位于城市 i 时，回到起点的最短路径长度。\n状态转移方程：$dp [mask][i] = min (dp [mask | (1 \u0026laquo; j)][j] + dist [i][j])$，其中 j 是未访问的城市。\n初始条件：$dp [(1 \u0026laquo; n) - 1][i] = dist [i][0]$（所有城市都已访问，直接返回起点）。\n最终结果：$dp [1][0]$（从起点开始，访问所有城市后回到起点的最短路径）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def tsp(dist): n = len(dist) # dp[i][mask]表示从起点0出发，当前在城市i，已访问城市集合为mask时的最短路径长度 # mask是一个二进制数，第j位为1表示城市j已访问 dp = [[float(\u0026#39;inf\u0026#39;)] * (1 \u0026lt;\u0026lt; n) for _ in range(n)] # 初始化：从起点0出发，已访问起点0（mask=1），路径长度为0 dp[0][1] = 0 # 枚举所有可能的城市访问状态 for mask in range(1 \u0026lt;\u0026lt; n): # 遍历当前已访问的城市 for current_city in range(n): # 如果当前城市不在已访问集合中，跳过 if not (mask \u0026amp; (1 \u0026lt;\u0026lt; current_city)): continue # 尝试从未访问的城市中选择下一个要访问的城市 for next_city in range(n): # 如果下一个城市已经访问过，跳过 if mask \u0026amp; (1 \u0026lt;\u0026lt; next_city): continue # 计算新的访问状态（添加下一个城市） new_mask = mask | (1 \u0026lt;\u0026lt; next_city) # 更新从当前城市到下一个城市的最短路径 dp[next_city][new_mask] = min( dp[next_city][new_mask], dp[current_city][mask] + dist[current_city][next_city] ) # 找到访问完所有城市后，从最后一个城市返回起点的最短路径 ans = float(\u0026#39;inf\u0026#39;) for city in range(n): # 如果城市不是起点（因为已经访问了所有城市，所以mask是全1） if city != 0: # 计算从该城市返回起点的总路径长度 total_distance = dp[city][(1 \u0026lt;\u0026lt; n) - 1] + dist[city][0] ans = min(ans, total_distance) return ans # 示例 n = int(input()) dist = [list(map(int, input().split())) for _ in range(n)] print(tsp(dist)) 3.图着色问题 问题描述： 给定一个无向图，为每个顶点分配一种颜色，使得相邻顶点颜色不同，求所需的最少颜色数。\n算法思想： 使用回溯法或动态规划，通过状态压缩表示已着色的顶点集合，递推计算着色方案数。\n动态规划解法步骤：\n定义状态：$dp [mask] $表示顶点集合为 mask 的子图的着色方案数。 状态转移方程：$dp [mask] = sum (dp [mask - subset])$，其中 subset 是 mask 的独立集（内部顶点互不相邻）。 初始条件：$dp [0] = 1$（空集只有一种着色方案）。 最终结果：找到最小的 k，使得 $dp [(1 \u0026laquo; n) - 1] \u0026gt; 0$（所有顶点都已着色）。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def graph_coloring_dp(graph): \u0026#34;\u0026#34;\u0026#34; 使用动态规划解决图着色问题 参数: graph: 邻接表表示的图，例如[[1,2], [0,2], [0,1]]表示三角形图 返回: 最少需要的颜色数 \u0026#34;\u0026#34;\u0026#34; n = len(graph) if n == 0: return 0 # 预处理所有独立集(使用位掩码表示) independent_sets = [] for mask in range(1, 1 \u0026lt;\u0026lt; n): is_independent = True for i in range(n): if mask \u0026amp; (1 \u0026lt;\u0026lt; i): for neighbor in graph[i]: if mask \u0026amp; (1 \u0026lt;\u0026lt; neighbor): is_independent = False break if not is_independent: break if is_independent: independent_sets.append(mask) # 初始化DP数组 dp = [float(\u0026#39;inf\u0026#39;)] * (1 \u0026lt;\u0026lt; n) dp[0] = 0 # 空集需要0种颜色 # 动态规划填表 for mask in range(1, 1 \u0026lt;\u0026lt; n): # 遍历所有独立子集 for subset in independent_sets: if (mask \u0026amp; subset) == subset: # subset是mask的子集 dp[mask] = min(dp[mask], dp[mask ^ subset] + 1) return dp[(1 \u0026lt;\u0026lt; n) - 1] # 测试用例 if __name__ == \u0026#34;__main__\u0026#34;: # 示例1: 三角形图(需要3种颜色) graph1 = [[1, 2], [0, 2], [0, 1]] print(\u0026#34;三角形图最少需要颜色:\u0026#34;, graph_coloring_dp(graph1)) # 应输出3 # 示例2: 二分图(需要2种颜色) graph2 = [[1, 3], [0, 2], [1, 3], [0, 2]] print(\u0026#34;二分图最少需要颜色:\u0026#34;, graph_coloring_dp(graph2)) # 应输出2 # 示例3: 单顶点图(需要1种颜色) graph3 = [[]] print(\u0026#34;单顶点图最少需要颜色:\u0026#34;, graph_coloring_dp(graph3)) # 应输出1 # 示例4: 不连通的两个顶点(需要1种颜色) graph4 = [[], []] print(\u0026#34;两不连顶点最少需要颜色:\u0026#34;, graph_coloring_dp(graph4)) # 应输出1 # 示例5: 4个顶点的环(需要2种颜色) graph5 = [[1, 3], [0, 2], [1, 3], [0, 2]] print(\u0026#34;四顶点环最少需要颜色:\u0026#34;, graph_coloring_dp(graph5)) # 应输出2 4.集合覆盖问题 问题描述： 给定一个全集 U 和若干子集 $S1, S2, \u0026hellip;, Sn$，找到最小的子集集合，使得这些子集的并集等于 U。\n算法思想： 使用贪心算法或动态规划，通过状态压缩表示已覆盖的元素集合，递推计算最小子集数。\n动态规划解法步骤：\n定义状态：$dp [mask]$ 表示覆盖元素集合为 mask 所需的最小子集数。\n状态转移方程：$dp [mask] = min (dp [mask], dp [mask - subset] + 1)$，其中 subset 是某个子集覆盖的元素。\n初始条件：$dp [0] = 0$（空集不需要任何子集覆盖）。\n最终结果：$dp [(1 \u0026laquo; m) - 1]$，其中 m 是全集 U 的元素个数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def set_cover(universe, subsets): m = len(universe) # 将元素映射到索引 element_to_index = {element: i for i, element in enumerate(universe)} # 将每个子集转换为位掩码 subset_masks = [] for subset in subsets: mask = 0 for element in subset: if element in element_to_index: mask |= 1 \u0026lt;\u0026lt; element_to_index[element] subset_masks.append(mask) # 动态规划求解 dp = [float(\u0026#39;inf\u0026#39;)] * (1 \u0026lt;\u0026lt; m) dp[0] = 0 # 空集不需要任何子集 for mask in range(1 \u0026lt;\u0026lt; m): if dp[mask] == float(\u0026#39;inf\u0026#39;): continue for subset_mask in subset_masks: new_mask = mask | subset_mask dp[new_mask] = min(dp[new_mask], dp[mask] + 1) # 返回覆盖全集所需的最小子集数 return dp[(1 \u0026lt;\u0026lt; m) - 1] # 示例 universe = {1, 2, 3, 4, 5} subsets = [ {1, 2, 3}, {2, 4}, {3, 4}, {4, 5} ] print(set_cover(universe, subsets)) # 输出: 2 5.哈密尔顿回路问题 问题描述： 给定一个图，求一条经过每个顶点恰好一次，最后回到起点的路径。\n算法思想： 使用动态规划或回溯法，通过状态压缩表示已访问的顶点集合，递推计算是否存在哈密尔顿回路。\n动态规划解法步骤：\n定义状态：$dp [mask][i]$ 表示已访问顶点集合为 mask，当前位于顶点 i 时，是否存在一条从起点到 i 的哈密尔顿路径。\n状态转移方程：$dp [mask][i] = OR (dp [mask - {i}][j] AND graph [j][i]) $，其中 j 是 mask 中除 i 外的顶点。\n初始条件：$dp [1 \u0026laquo; i][i] = True$（只访问一个顶点）。\n最终结果：$OR (dp [(1 \u0026laquo; n) - 1][i] AND graph [i][0])$，其中 n 是顶点数，0 是起点。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def hamiltonian_cycle(graph): n = len(graph) # 初始化dp数组 dp = [[False] * n for _ in range(1 \u0026lt;\u0026lt; n)] # 初始条件：只访问一个顶点 for i in range(n): dp[1 \u0026lt;\u0026lt; i][i] = True # 状态压缩DP for mask in range(1 \u0026lt;\u0026lt; n): for i in range(n): if not (mask \u0026amp; (1 \u0026lt;\u0026lt; i)): # i不在mask中 continue # 枚举mask中除i外的顶点j for j in range(n): if j == i: continue if mask \u0026amp; (1 \u0026lt;\u0026lt; j) and graph[j][i] and dp[mask ^ (1 \u0026lt;\u0026lt; i)][j]: dp[mask][i] = True break # 检查是否存在哈密尔顿回路 for i in range(1, n): # 起点为0，检查其他顶点到0是否有边 if dp[(1 \u0026lt;\u0026lt; n) - 1][i] and graph[i][0]: return True return False # 示例 graph = [ [0, 1, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 0] ] print(hamiltonian_cycle(graph)) # 输出: True 6.划分问题 问题描述： 给定一组正整数，是否可以将其分成两个子集，使得两个子集的元素和相等。\n算法思想： 使用动态规划，将问题转化为子集和问题，判断是否存在一个子集的和等于总和的一半。\n动态规划解法步骤：\n定义状态：$dp [i][s] $表示考虑前 i 个元素，是否存在子集和为 s。\n状态转移方程：$dp [i][s] = dp [i-1][s] OR dp [i-1][s-nums [i-1]]，其中 nums [i-1]$ 是第 i 个元素。\n初始条件：$dp [0][0] = True$（空集的和为 0），$dp [0][s] = False（s\u0026gt;0）$。\n最终结果：$dp [n][sum/2]$，其中 n 是元素个数，sum 是所有元素的和。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def can_partition(nums): total_sum = sum(nums) # 如果总和为奇数，无法平分 if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # 创建dp数组 dp = [[False] * (target + 1) for _ in range(n + 1)] # 初始条件 dp[0][0] = True # 空集的和为0 # 填充dp数组 for i in range(1, n + 1): for s in range(target + 1): # 不选择当前元素 dp[i][s] = dp[i-1][s] # 选择当前元素 if s \u0026gt;= nums[i-1]: dp[i][s] = dp[i][s] or dp[i-1][s-nums[i-1]] return dp[n][target] # 示例 nums = [1, 5, 11, 5] print(can_partition(nums)) # 输出: True 7.SAT 问题描述 SAT（布尔可满足性问题）是计算机科学中的一个经典问题，也是第一个被证明为 NP 完全的问题。问题描述如下：\n给定一个布尔表达式，判断是否存在一组变量赋值，使得整个表达式的值为真。布尔表达式通常以合取范式（CNF）的形式给出，即多个子句的合取（AND），每个子句是多个文字的析取（OR），文字是变量或其否定。\n例如，下面是一个 $CNF$ 形式的布尔表达式：\n1 (A ∨ ¬B ∨ C) ∧ (¬A ∨ B ∨ D) ∧ (¬C ∨ ¬D) 解决思路\n动态规划解决 SAT 问题的核心思想是通过状态转移来逐步构建解空间。对于 n 个变量的问题，我们可以考虑：\n状态定义：定义 $dp [i][s]$ 表示考虑前 i 个变量，且子句集合状态为 s 时是否可满足 状态转移：对于每个变量，尝试赋值为真或假，然后更新子句的状态 边界条件：$dp [0][s]$ 表示不使用任何变量时，子句集合状态为 s 的可满足性 结果：$dp [n][all_satisfied]$ 表示所有变量都考虑后，所有子句是否都被满足 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def sat_solver(clauses, variables): \u0026#34;\u0026#34;\u0026#34; 使用动态规划解决SAT问题 参数: clauses: 列表，每个元素是一个子句，子句表示为文字列表，正文字为正数，负文字为负数 variables: 变量数量 返回: 是否存在满足所有子句的变量赋值 \u0026#34;\u0026#34;\u0026#34; # 预处理：计算每个子句的状态掩码 clause_masks = [] for clause in clauses: mask = 0 for literal in clause: var = abs(literal) - 1 # 变量索引从0开始 if literal \u0026gt; 0: mask |= 1 \u0026lt;\u0026lt; var # 正文字在对应位置为1 else: mask |= 1 \u0026lt;\u0026lt; (var + variables) # 负文字在高半部分对应位置为1 clause_masks.append(mask) # 状态数量：每个变量可以为真或假 states = 1 \u0026lt;\u0026lt; (2 * variables) # dp[i][s]表示考虑前i个变量，子句状态为s时是否可满足 dp = [False] * states dp[0] = True # 初始状态：没有变量，所有子句都未满足 # 遍历每个变量 for var in range(variables): # 复制当前状态 new_dp = [False] * states for s in range(states): if not dp[s]: continue # 尝试将变量设为真 true_mask = 1 \u0026lt;\u0026lt; var new_state_true = s for i, mask in enumerate(clause_masks): if (mask \u0026amp; true_mask) and not (s \u0026amp; (1 \u0026lt;\u0026lt; i)): new_state_true |= 1 \u0026lt;\u0026lt; i # 尝试将变量设为假 false_mask = 1 \u0026lt;\u0026lt; (var + variables) new_state_false = s for i, mask in enumerate(clause_masks): if (mask \u0026amp; false_mask) and not (s \u0026amp; (1 \u0026lt;\u0026lt; i)): new_state_false |= 1 \u0026lt;\u0026lt; i new_dp[new_state_true] = True new_dp[new_state_false] = True dp = new_dp # 检查是否所有子句都被满足 all_satisfied = (1 \u0026lt;\u0026lt; len(clauses)) - 1 return dp[all_satisfied] # 示例用法 if __name__ == \u0026#34;__main__\u0026#34;: # 示例：(A ∨ ¬B ∨ C) ∧ (¬A ∨ B ∨ D) ∧ (¬C ∨ ¬D) clauses = [ [1, -2, 3], # A ∨ ¬B ∨ C [-1, 2, 4], # ¬A ∨ B ∨ D [-3, -4] # ¬C ∨ ¬D ] variables = 4 result = sat_solver(clauses, variables) print(\u0026#34;表达式是否可满足:\u0026#34;, result) 这个实现使用了位掩码来表示子句的状态。对于每个变量，我们尝试将其赋值为真或假，然后更新子句的满足状态。状态转移的核心在于：\n使用位掩码表示每个子句的满足条件 使用动态规划数组记录不同状态下的可满足性 对于每个变量，尝试两种赋值方式并更新状态 ","date":"2025-05-26T22:05:36+08:00","image":"https://backupenable.github.io/p/%E7%BB%8F%E5%85%B8np%E9%9A%BE%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/%E5%B1%B1%E7%94%B0%E5%87%89_hu16546768430504826456.png","permalink":"https://backupenable.github.io/p/%E7%BB%8F%E5%85%B8np%E9%9A%BE%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/","title":"经典NP难问题详解"},{"content":"A 跑步计划 题意简述：小蓝计划在某天的日期或星期中出现数字\u0026quot;1\u0026quot;时跑5千米，否则只跑1千米。计算2023年全年跑步的总距离。\n解题思路：使用Python的datetime模块遍历2023年的每一天，检查日期或星期中是否包含\u0026quot;1\u0026quot;。\n代码：\n1 print(1333) B 残缺的数字 题意简述：给定一个有缺失数字的数，每个缺失位可能是0-9中的任意数字，问所有可能情况的数目。\n解题思路：统计每个缺失位置的可能性数量，使用乘法原理计算总数。\n代码：\n1 print(254016000) C 整数变换 题意简述：每分钟数字会变为当前数字减去其各位数字之和，直到变为0，求变换次数。\n解题思路：直接模拟变换过程，直到数字变为0。\n代码：\n1 2 3 4 5 6 7 n = int(input()) ans = 0 while n != 0: tot = sum(int(ch) for ch in str(n)) n -= tot ans += 1 print(ans) D 2023 题意简述：构造特定条件的数字串，使用容斥原理计算。\n解题思路：使用二进制反演处理容斥问题，预处理阶乘和逆元。\n代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import math N, maxn = 10**5+5, 10**5 fact, inv = [1]*N, [1]*N mod = 998244353 def init(): for i in range(1, maxn+1): fact[i] = fact[i-1] * i % mod inv[maxn] = pow(fact[maxn], mod-2, mod) for i in range(maxn-1, 0, -1): inv[i] = inv[i+1] * (i+1) % mod def comb(n, m): if n \u0026lt; m: return 0 return fact[n] * inv[m] % mod * inv[n-m] % mod init() n, m = map(int, input().split()) k = n // 4 ans = 0 for i in range(m, k+1): ans = (ans + (-1)**(i-m) * comb(i, m) % mod * comb(n-3*i, i) % mod * pow(10, n-4*i, mod) % mod) % mod print(ans) E 火车运输 题意简述：将物品装入两个容量分别为a和b的火车，求能装载的最大总量。\n解题思路：二维动态规划，状态表示当前两火车装载量。\n代码：\n1 2 3 4 5 6 7 8 9 10 11 n, a, b = map(int, input().split()) w = list(map(int, input().split())) dp = [[0]*1005 for _ in range(1005)] for weight in w: for j in range(a, -1, -1): for k in range(b, -1, -1): if j \u0026gt;= weight: dp[j][k] = max(dp[j][k], dp[j-weight][k] + weight) if k \u0026gt;= weight: dp[j][k] = max(dp[j][k], dp[j][k-weight] + weight) print(dp[a][b]) F 走方格 题意简述：在n×n网格中从左上角到右下角，求最短步数。\n解题思路：BFS搜索最短路，考虑常规移动和特殊移动规则。\n代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from collections import deque n = int(input()) mp = [list(map(int, input().split())) for _ in range(n)] vis = [[0]*n for _ in range(n)] q = deque([(0, 0, 0)]) vis[0][0] = 1 while q: x, y, t = q.popleft() if x == n-1 and y == n-1: print(t) break # 常规移动 if x+1 \u0026lt; n and not vis[x+1][y]: vis[x+1][y] = 1 q.append((x+1, y, t+1)) if y+1 \u0026lt; n and not vis[x][y+1]: vis[x][y+1] = 1 q.append((x, y+1, t+1)) # 特殊移动 for i in range(y+1, n): if mp[x][i] \u0026lt; mp[x][i-1] and not vis[x][i]: vis[x][i] = 1 q.append((x, i, t+1)) else: break for i in range(y-1, -1, -1): if mp[x][i] \u0026lt; mp[x][i+1] and not vis[x][i]: vis[x][i] = 1 q.append((x, i, t+1)) else: break G 等腰三角形 题意简述：分类讨论几何问题。\n解题思路：待补充。\nH 彩色二叉树 题意简述：在完全二叉树上进行染色操作和查询操作。\n解题思路：利用完全二叉树性质，可以快速求出两点距离,然后由于染色具有覆盖性,故从后往前处理染色操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 n, q = map(int, input().split()) history = [] def distance(a, b): cnt = 0 while a != b: if a \u0026gt; b: a = a // 2 else: b = b // 2 cnt += 1 return cnt def query(node): for i in range(len(history)-1, -1, -1): x, y, z = history[i] if distance(node, x) \u0026lt;= y: return z return 0 for _ in range(q): cmd = list(map(int, input().split())) if cmd[0] == 1: history.append((cmd[1], cmd[2], cmd[3])) else: print(query(cmd[1])) I 选段排序 题意简述：通过排序子数组使特定位置的差值最大化。\n解题思路：使用堆维护区间极值，考虑左右扩展的影响。\n代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import heapq n, p, q = map(int, input().split()) a = [0] + list(map(int, input().split())) res = 0 # 处理初始区间[p,q] max_heap = [] min_heap = [] for i in range(p, q+1): heapq.heappush(max_heap, -a[i]) heapq.heappush(min_heap, a[i]) current_max = -max_heap[0] current_min = min_heap[0] res = max(res, current_max - current_min) # 向右扩展 for i in range(q+1, n+1): current_min = min(current_min, a[i]) heapq.heappush(max_heap, -a[i]) heapq.heappop(max_heap) current_max = -max_heap[0] res = max(res, current_max - current_min) # 向左扩展 max_heap = [-a[i] for i in range(p, q+1)] heapq.heapify(max_heap) current_max = -max_heap[0] current_min = min_heap[0] for i in range(p-1, 0, -1): current_max = max(current_max, a[i]) heapq.heappush(min_heap, a[i]) heapq.heappop(min_heap) current_min = min_heap[0] res = max(res, current_max - current_min) print(res) J 最长同类子串 题意简述：找两个字符串的最长子串，使得字符出现位置同类。\n解题思路：字符串哈希（示例为30%暴力解法）。\n代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 s, t = input(), input() n, m = len(s), len(t) def check(k): for i in range(n-k+1): for j in range(m-k+1): pattern1 = [[] for _ in range(26)] pattern2 = [[] for _ in range(26)] for l in range(k): pattern1[ord(s[i+l])-ord(\u0026#39;a\u0026#39;)].append(l) pattern2[ord(t[j+l])-ord(\u0026#39;a\u0026#39;)].append(l) if sorted(pattern1) == sorted(pattern2): return True return False left, right = 0, min(n, m) while left \u0026lt; right: mid = (left + right + 1) // 2 if check(mid): left = mid else: right = mid - 1 print(left) ","date":"2025-05-22T21:15:36+08:00","image":"https://backupenable.github.io/p/%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9Bpythona%E9%A2%98%E8%A7%A3/%E4%BF%9D%E7%99%BB%E5%BF%83%E7%88%B1_hu10536476577702003786.png","permalink":"https://backupenable.github.io/p/%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9Bpythona%E9%A2%98%E8%A7%A3/","title":"第十四届蓝桥杯国赛PythonA题解"},{"content":"A 斐波那契与7 简要题意：求斐波那契数列的第1至202202011200项中，有多少项的个位是7。\n解题思路：\n直接暴力计算所有项不可行，因为数据量过大。 通过打表观察发现个位数每300项会出现循环规律。 预先计算循环周期内个位为7的项数（40个），然后计算完整周期数和剩余项数。 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 a = [14, 16, 17, 23, 34, 37, 43, 56, 74, 76, 77, 83, 94, 97, 103, 116, 134, 136, 137, 143, 154, 157, 163, 176, 194, 196, 197, 203, 214, 217, 223, 236, 254, 256, 257, 263, 274, 277, 283, 296] ans = 202202011200 // 300 * 40 mo = 202202011200 % 300 for x in a: if mo \u0026gt;= x: ans += 1 else: break print(ans) B 火柴棒数字 简要题意：用300根火柴棒拼出最大的整数。\n解题思路：\n要使数字最大，首先位数要尽可能多。 统计各数字的火柴消耗，优先使用消耗少的数字（1消耗最少，但0不能作为前导）。 发现可以正好用9,7,5,4,3,2,1各10个拼出最大数字。 代码实现：\n1 print(9999999999777777777755555555554444444444333333333322222222221111111111) C 取模 简要题意：给定n,m，判断是否存在不同的x,y满足1≤x\u0026lt;y≤m且n mod x = n mod y。\n解题思路：\n使用鸽巢原理，若n mod i必须等于i-1才能避免重复。 这个条件非常严格，实际只需检查前几项即可快速判断。 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 t = int(input()) for _ in range(t): n, m = map(int, input().split()) f = 0 for i in range(1, m + 1): if n % i != i - 1: print(\u0026#34;Yes\u0026#34;) f = 1 break if not f: print(\u0026#34;No\u0026#34;) D 最大公约数 简要题意：求满足gcd(x,y)=k的数对个数。\n解题思路：\n使用莫比乌斯反演来高效计算区间内的合法数对。 预处理莫比乌斯函数，然后通过分块计算加速。 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import sys import math def preprocess_mobius(max_n): max_n += 1 is_prime = [True] * max_n is_prime[0] = is_prime[1] = False mu = [1] * max_n for i in range(2, max_n): if is_prime[i]: for j in range(i, max_n, i): is_prime[j] = (j == i) mu[j] *= -1 j = i * i for k in range(j, max_n, j): mu[k] = 0 return mu max_num = 5 * 10**4 mu = preprocess_mobius(max_num) prefix_mu = [0] * (max_num + 1) for i in range(1, max_num + 1): prefix_mu[i] = prefix_mu[i-1] + mu[i] def compute_f(a, b): min_val = min(a, b) res = 0 i = 1 while i \u0026lt;= min_val: q_a = a // i q_b = b // i next_i = min(a // q_a + 1, b // q_b + 1) if (q_a !=0 and q_b !=0) else min_val + 1 next_i = min(next_i, min_val + 1) res += (prefix_mu[next_i - 1] - prefix_mu[i - 1]) * q_a * q_b i = next_i return res n = int(sys.stdin.readline()) for _ in range(n): a, b, c, d, k = map(int, sys.stdin.readline().split()) a = (a - 1) // k b = b // k c = (c - 1) // k d = d // k total = compute_f(b, d) - compute_f(a, d) - compute_f(b, c) + compute_f(a, c) print(total) E 数组个数 简要题意：构造满足特定条件的数组方案数。\n解题思路：\n枚举前两个数，然后动态规划计算后续数的可能情况。 检查每个位置的约束条件并累加合法方案。 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 mod = 1000000007 n = int(input()) a = list(map(int, input().split())) def check(x, y): res = 0 dp = {} dp[(x, y)] = 1 for h in range(2, n): new_dp = {} for i, j in dp: for k in range(11): if max(i, j, k) == a[h-1]: new_dp[(j, k)] = new_dp.get((j, k), 0) + dp[(i, j)] new_dp[(j, k)] %= mod dp = new_dp for i, j in dp: if max(i, j, x) == a[-1] and max(x, y, j) == a[0]: res += dp[(i, j)] res %= mod return res ans = 0 for x in range(11): for y in range(11): ans = (ans + check(x, y)) % mod print(ans) F 六六大顺 简要题意：计算特定数列的和。\n解题思路：\n发现数列有数学规律，可通过公式直接计算。 使用快速幂优化大数运算。 代码实现：\n1 2 3 n = int(input()) ans = 4 * (pow(100, n + 1) - 22 * pow(10, n + 1) + 120 + 99 * n) print(ans // 891) G 环境治理 简要题意：通过调整道路灰尘使总灰尘达标的最小天数。\n解题思路：\n二分答案结合Floyd算法计算最短路径。 检查中间结果是否满足约束条件。 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 from copy import deepcopy n, q = map(int, input().split()) d = [[0] * (n + 2) for _ in range(n + 2)] low = [[0] * (n + 2) for _ in range(n + 2)] for i in range(1, n + 1): td = list(map(int, input().split())) for j in range(1, n + 1): d[i][j] = td[j - 1] for i in range(1, n + 1): td = list(map(int, input().split())) for j in range(1, n + 1): low[i][j] = td[j - 1] def floyd(dist): for k in range(1, n + 1): for i in range(1, n + 1): for j in range(1, n + 1): if dist[i][k] + dist[k][j] \u0026lt; dist[i][j]: dist[i][j] = dist[i][k] + dist[k][j] ans = 0 for i in range(1, n + 1): for j in range(1, n + 1): ans += dist[i][j] return ans def check(x): cd = deepcopy(d) for i in range(1, n + 1): tmp = x // n + (1 if x % n \u0026gt;= i else 0) for j in range(1, n + 1): cd[i][j] = max(cd[i][j] - tmp, low[i][j]) cd[j][i] = max(cd[j][i] - tmp, low[j][i]) res = floyd(cd) return res \u0026lt;= q l, r = 0, (1 \u0026lt;\u0026lt; 32) + 5 while l + 1 \u0026lt; r: mid = l + r \u0026gt;\u0026gt; 1 if check(mid): r = mid else: l = mid print(r if r != (1 \u0026lt;\u0026lt; 32) + 5 else -1) H 宝石收集 题目分析\n给定一个有向图，每个节点标记为红宝石（\u0026lsquo;0\u0026rsquo;）或蓝宝石（\u0026lsquo;1\u0026rsquo;）。我们需要从某些节点出发，收集宝石，使得在路径上收集的 红宝石总数 和 蓝宝石总数 的较小值（即 min(红宝石和, 蓝宝石和)）最大化。\n解题思路\n强连通分量（SCC）缩点 使用 Tarjan 算法 求出所有强连通分量（SCC），并将每个 SCC 缩成一个点。 缩点后，原图变为 有向无环图（DAG），便于后续动态规划（DP）处理。 统计 SCC 内的宝石数量 对于每个 SCC，计算其包含的 红宝石数量（red[i]） 和 蓝宝石数量（blue[i]）。 动态规划（DP）求解最优解 定义 dp[i][j] 表示在 SCC i 时，收集了 j 个蓝宝石时，能得到的 最大红宝石数量。 转移方程： 若当前 SCC i 指向 SCC y，则更新 dp[y][j + blue[y]] = max(dp[y][j + blue[y]], dp[i][j] + red[y])。 最终答案：遍历所有 dp[i][j]，求 min(dp[i][j], j) 的最大值。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 import sys from collections import defaultdict def main(): sys.setrecursionlimit(2000) N = 2010 n = int(sys.stdin.readline()) s = \u0026#39; \u0026#39; + sys.stdin.readline().strip() m = int(sys.stdin.readline()) e = [[] for _ in range(N)] for _ in range(m): a, b = map(int, sys.stdin.readline().split()) a += 1 b += 1 e[a].append(b) # Tarjan\u0026#39;s SCC dfn = [0] * N low = [0] * N stk = [] instk = [False] * N scc = [0] * N tot = 0 top = 0 cnt = 0 def tarjan(x): nonlocal tot, top, cnt tot += 1 dfn[x] = low[x] = tot stk.append(x) top += 1 instk[x] = True for y in e[x]: if not dfn[y]: tarjan(y) low[x] = min(low[x], low[y]) elif instk[y]: low[x] = min(low[x], dfn[y]) if dfn[x] == low[x]: cnt += 1 while True: y = stk.pop() top -= 1 instk[y] = False scc[y] = cnt if y == x: break for i in range(1, n + 1): if not dfn[i]: tarjan(i) red = [0] * (cnt + 2) blue = [0] * (cnt + 2) ne = [[] for _ in range(cnt + 2)] for x in range(1, n + 1): if s[x] == \u0026#39;0\u0026#39;: red[scc[x]] += 1 else: blue[scc[x]] += 1 for y in e[x]: a = scc[x] b = scc[y] if a != b: ne[a].append(b) dp = [[-1] * (n + 2) for _ in range(cnt + 2)] for i in range(1, cnt + 1): if blue[i] \u0026lt;= n: dp[i][blue[i]] = red[i] for i in range(cnt, 0, -1): for j in range(n + 1): if dp[i][j] != -1: for y in ne[i]: if j + blue[y] \u0026lt;= n: if dp[y][j + blue[y]] \u0026lt; dp[i][j] + red[y]: dp[y][j + blue[y]] = dp[i][j] + red[y] ans = 0 for i in range(1, cnt + 1): for j in range(n + 1): if dp[i][j] != -1: ans = max(ans, min(dp[i][j], j)) print(ans) if __name__ == \u0026#34;__main__\u0026#34;: main() I 图书借阅 简要题意：优先队列贪心问题（待补充详细思路）\nJ 替换字符 简要题意：高效处理字符串的区间字符替换。\n解题思路：\n使用字典记录每个字符的位置索引。 通过二分查找快速定位需要修改的区间。 批量更新字符位置信息。 代码实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import string import bisect s = list(input()) mp = {i: [] for i in string.ascii_lowercase} for idx in range(len(s)): mp[s[idx]].append(idx) m = int(input()) for _ in range(m): l, r, x, y = input().split() l, r = map(int, [l, r]) mp[x].sort() x_l = bisect.bisect_left(mp[x], l - 1) x_r = bisect.bisect_right(mp[x], r - 1) mp[y].extend(mp[x][x_l:x_r]) for idx in mp[x][x_l:x_r]: s[idx] = y del mp[x][x_l:x_r] print(\u0026#34;\u0026#34;.join(s)) ","date":"2025-05-19T18:15:36+08:00","image":"https://backupenable.github.io/p/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9Bpythona%E9%A2%98%E8%A7%A3/%E8%95%BE%E5%A7%86_hu13095987224758015348.png","permalink":"https://backupenable.github.io/p/%E7%AC%AC%E5%8D%81%E4%B8%89%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9Bpythona%E9%A2%98%E8%A7%A3/","title":"第十三届蓝桥杯国赛PythonA题解"},{"content":"A 汉字田 简要题意:汉字\u0026quot;田\u0026quot;抽象成九个点,问一共有多少条直线恰好只经过这 99 个点中的任意两个点？\n瞪眼法直接算就行了\n1 print(12) B 床底取牌 简要题意: 六种字母各有五张,拼成\u0026quot;lanqiao\u0026quot;最少需要取多少张\n只需考虑最差情况 l,n,q,i,o都拿齐了,依旧组不成,还需2张a,答案就是27\n1 print(27) C 设置密码 简要题意: 按照要求判断是哪一种密码\n需要注意的是密码可能包含要求之外的字符,要特判为0\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 special=\u0026#34;~!@#$%^\u0026amp;*()_\u0026#34; T=int(input()) for _ in range(T): s=input() n=len(s) f1,f2,f3,f4=0,0,0,0 f5=set() flag=True for ch in s: if ch.isupper(): f1=1 elif ch.islower(): f2=1 elif ch.isdigit(): f3=1 elif ch in special: f4=1 f5.add(ch) else: flag=False break if not flag: print(0) continue if n\u0026gt;=12 and ((f1+f2+f3+f4==4)or(len(f5)\u0026gt;=3 and f1+f2+f3+f4==3)): print(3) elif n\u0026gt;=8 and(f1+f2+f3+f4\u0026gt;=2): print(2) elif n\u0026gt;=6: print(1) else: print(0) D 限流器 简要题意: 长度为N的区间最多让访问M次,求访问成功次数\n用桶记录一下时间戳的次数,记录一下前缀和即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 n,m,l=map(int,input().split()) t=[0]*1005 a=list(map(int,input().split())) for x in a: t[x+1]+=1 for i in range(1,1002): t[i]+=t[i-1] r=n ans=0 while r\u0026lt;=1001: tmp=t[r]-t[r-n] ans+=min(tmp,m) r+=n r-=n if r!=1001: ans+=min(t[1001]-t[r],m) print(ans) E 特别的数组 简要题意: 删除中间一段,剩下的要组成特别的数组且长度最长\n经典的$O(n^2)$枚举无法通过,可以考虑枚举左,维护右,初始计算左边组成特别数组的$l$,和右边组成特别数组的$r$,在通过扩大$l$的同时维护$r$的位置,可以提前维护每个数最后出现的位置\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 n=int(input()) a=list(map(int,input().split())) l,r=0,0 mx=max(a) dp=[0]*(mx+5) st=set() for i in range(n-1,-1,-1): if a[i] in st: r=i+1 break st.add(a[i]) st.clear() for i in range(n): if a[i] in st: l=i-1 break st.add(a[i]) for i in range(n): dp[a[i]]=i ans=n-r for i in range(min(l+1,r)): r=max(r,dp[a[i]]+1) ans=max(ans,i+1+n-r) print(ans) F记事本 牛客的一个原题,使用两个栈(对顶栈)模拟即可\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 t=int(input()) st1,st2=[],[] for _ in range(t): s=input() if \u0026#34;insert\u0026#34; in s: ts=s.split(\u0026#39; \u0026#39;,maxsplit=1)[1][1:-1] for ch in ts: st1.append(ch) elif s[0]==\u0026#39;d\u0026#39;: x=int(s[1:-1]) if s[-1]==\u0026#39;h\u0026#39;: for i in range(min(len(st1),x)): st1.pop() else: for i in range(min(len(st2),x)): st2.pop() else: x=int(s[0:-1]) if s[-1]==\u0026#39;h\u0026#39;: while st1 and x: tmp=st1.pop() st2.append(tmp) x-=1 else: while st2 and x: tmp=st2.pop() st1.append(tmp) x-=1 print(\u0026#39;\u0026#39;.join(st1)+\u0026#39;\u0026#39;.join(st2)[::-1]) G 羊圈 简要题意: 尽量用羊圈圈住羊,是最终跑走羊的数量的期望最少\n使用状压dp,f(x,s) 表示从第x头羊开始考虑,羊圈二进制可选状态为s的最大值\n最终答案是dp(1,(1\u0026laquo;n)-1)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 n,m=map(int,input().split()) v=list(map(int,input().split())) a=list(map(float,input().split())) dp=[[-1]*(1\u0026lt;\u0026lt;n) for _ in range(m+2)] def f(x,s): if x==m+1:return 0 if dp[x][s]!=-1:return dp[x][s] res=f(x+1,s) for j in range(n): if(s\u0026amp;(1\u0026lt;\u0026lt;j)): ns=s^(1\u0026lt;\u0026lt;j) nx=min(m+1,x+v[j]) res=max(res,f(nx,ns)+pre[nx-1]-pre[x-1]) dp[x][s]=res return res pre=[0]*(m+1) for i in range(1,m+1): pre[i]=pre[i-1]+a[i-1] s=(1\u0026lt;\u0026lt;n)-1 print(f\u0026#34;{pre[m]-f(1,s):.2f}\u0026#34;) 改成递推形式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 n, m = map(int, input().split()) v = list(map(int, input().split())) a =list(map (float, input().split())) pre = [0.0] * (m + 1) for i in range(1, m + 1): pre[i] = pre[i - 1] + a[i - 1] dp = [[-1.0] * ( 1\u0026lt;\u0026lt;n) for _ in range(m + 5)] # 初始化 for s in range(1 \u0026lt;\u0026lt; n): dp[m + 1][s] = 0.0 for x in range(m, 0, -1): for s in range(1 \u0026lt;\u0026lt; n): dp[x][s] = dp[x + 1][s] for j in range(n): if (s \u0026amp; (1 \u0026lt;\u0026lt; j)): ns = s ^ (1 \u0026lt;\u0026lt; j) nx = min(m + 1, x + v[j]) dp[x][s] = max(dp[x][s], dp[nx][ns] + (pre[nx - 1] - pre[x - 1])) s = (1 \u0026lt;\u0026lt; n) - 1 print(\u0026#34;{:.2f}\u0026#34;.format(pre[m] - dp[1][s])) H 排练 待补,官网目前提交会内部错误\nI 数字与留言 数位dp,待补,目前只写了个5%的暴力\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 x,y=map(int,input().split()) mod=10**9+7 ans=0 def check(n): sn=str(n) if \u0026#39;2\u0026#39; in sn or \u0026#39;4\u0026#39; in sn: return False else: return True for i in range(1,x): if not check(i): continue for j in range(i+1,x): if not check(j): continue for k in range(j+1,x): if not check(k): continue if (i+j+k)%2024==y: ans=(ans+1)%mod print(ans) J 药剂 像是概率dp,待补,写了个30%的暴力\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import sys from math import comb def solve(): N, mo = map(int, sys.stdin.readline().split()) a = list(map(int, sys.stdin.readline().split())) if N == 1: print(a[0] % mo) return total = 0 def dfs(current_a): nonlocal total if len(current_a) == 1: total = (total + current_a[0]) % mo return for i in range(len(current_a)): for j in range(i + 1, len(current_a)): new_a = current_a.copy() y = new_a.pop(j) x = new_a.pop(i) new_a1 = new_a.copy() new_a1.append(x + y) dfs(new_a1) new_a2 = new_a.copy() new_a2.append(x * y) dfs(new_a2) dfs(a) print(total) solve() ","date":"2025-05-13T18:15:36+08:00","image":"https://backupenable.github.io/p/%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9Bpythona%E9%A2%98%E8%A7%A3/%E9%9B%AA%E4%B8%8B%E9%9B%AA%E4%B9%8B%E4%B9%83_hu17362323151755533236.jpg","permalink":"https://backupenable.github.io/p/%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%BD%E8%B5%9Bpythona%E9%A2%98%E8%A7%A3/","title":"第十五届蓝桥杯国赛PythonA题解"},{"content":"3.4广义线性回归 一般形式：$y = g^{-1} \\left( w^T x + b \\right)$\n单调可微的联系函数 (link function)\n令 $g(\\cdot) = \\ln (\\cdot)$ 则得到对数线性回归\n$$\\ln y = w^T x + b$$实际上是在用$e^{w^T x + b}$逼近$y$\n3.5对率回归 线性回归模型产生的实值输出 $z = w^T x + b$\n期望输出 $y \\in {0, 1}$\n理想的\u0026quot;单位阶跃函数\u0026quot; (unit-step function)\n$$y = \\begin{cases} 0, \u0026 z \u003c 0; \\\\ 0.5, \u0026 z = 0; \\\\ 1, \u0026 z \u003e 0, \\end{cases}$$性质不好，需找\u0026quot;替代函数\u0026quot; (surrogate function)\n常用单调可微、任意阶可导\n$$y = \\frac{1}{1 + e^{-z}}$$找 $z$和 $y$的联系函数\n对数几率函数 (logistic function) 简称\u0026quot;对率函数\u0026quot;\n以对率函数为联系函数：$y = \\frac{1}{1 + e^{-z}}$\n变为$y = \\frac{1}{1 + e^{-(w^T x + b)}}$\n即：$\\ln \\left( \\frac{y}{1 - y} \\right) = w^T x + b$\n$\\ln \\left( \\frac{y}{1 - y} \\right)$称为几率 (odds)，反映了 $x$ 作为正例的相对可能性（log odds，亦称 logit）。\n“对数几率回归”（logistic regression）简称“对率回归”\n无需事先假设数据分布 可得到“类别”的近似概率预测 可直接应用现有数值优化算法求取最优解 注意：它是分类学习算法！\n3.6多分类任务 一对多（One-vs-Rest, OvR） 原理 为每个类别训练一个独立的二分类器，将该类别作为正类，其他所有类别合并作为负类\n实现步骤\n假设共有K个类别 训练K个二分类器（如逻辑回归、SVM等） 第i个分类器的训练数据： 正样本：原始数据中标签为类别i的样本 负样本：原始数据中标签不为类别i的所有样本 预测时： 用所有K个分类器分别预测 选择输出概率/分数最高的类别作为最终预测结果 特点\n优点：只需训练K个分类器，计算效率较高 缺点：当类别数很多时，每个分类器的负样本会远多于正样本，导致类别不平衡问题 一对一（One-vs-One, OvO） 原理 为每两个类别组合训练一个独立的二分类器，专门区分这两个类别\n实现步骤\n假设共有K个类别 训练K×(K-1)/2个二分类器（如逻辑回归、SVM等） 每个分类器(i,j)的训练数据： 只使用原始数据中标签为i或j的样本 类别i作为正类，类别j作为负类（或反之） 预测时： 让所有分类器进行预测并记录\u0026quot;投票\u0026quot; 统计每个类别获得的票数 选择得票数最多的类别作为最终预测结果 特点\n优点：每个分类器只关注两个类别，训练数据更均衡 缺点：需要训练O(K²)量级的分类器，当K很大时计算开销显著增加 ","date":"2025-04-28T20:05:36+08:00","image":"https://backupenable.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%85%A5%E9%97%A8-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922/%E5%B9%B3%E6%B3%BD%E5%94%AF_hu8592607334598026443.jpg","permalink":"https://backupenable.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%85%A5%E9%97%A8-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%922/","title":"机器学习 入门 线性回归(2)"},{"content":"[TOC]\n3.1 线性回归 $$ f(x_i) = wx_i + b \\quad \\text{使得} \\quad f(x_i) \\simeq y_i $$离散属性的处理：若有\u0026quot;序\u0026quot;（order），则连续化；否则，转化为 $k$ 维向量\n令均方误差最小化，有：\n$$ (w^*, b^*) = \\arg\\min_{(w, b)} \\sum_{i=1}^m (f(x_i) - y_i)^2 = \\arg\\min_{(w, b)} \\sum_{i=1}^m (y_i - wx_i - b)^2 $$$$ E(w, b) = \\sum_{i=1}^m (y_i - wx_i - b)^2 $$ 进行最小二乘参数估计\n3.2 最小二乘解 $$ E_{(w,b)} = \\sum_{i=1}^m (y_i - wx_i - b)^2 $$分别对 $w$ 和 $b$ 求导：\n$$ \\frac{\\partial E_{(w,b)}}{\\partial w} = 2 \\left( w \\sum_{i=1}^m x_i^2 - \\sum_{i=1}^m (y_i - b)x_i \\right) $$$$ \\frac{\\partial E_{(w,b)}}{\\partial b} = 2 \\left( mb - \\sum_{i=1}^m (y_i - wx_i) \\right) $$令导数为 0，得到闭式(closed-form)解：\n$$ w = \\frac{\\sum_{i=1}^m y_i (x_i - \\bar{x})}{\\sum_{i=1}^m x_i^2 - \\frac{1}{m} \\left( \\sum_{i=1}^m x_i \\right)^2} \\quad b = \\frac{1}{m} \\sum_{i=1}^m (y_i - wx_i) $$3.3 多元线性回归 同样采用最小二乘法求解，有\n$$ w^* = \\arg\\min_{w} (y - Xw)^T (y - Xw) $$$$ E_w = (y - Xw)^T (y - Xw) $$，对 $w$ 求导：\n$$ \\frac{\\partial E_w}{\\partial w} = 2X^T (Xw - y) $$令其为零可得 $w$\n然而，麻烦来了：涉及矩阵求逆！\n若 $X^T X$ 满秩或正定，则 $$ w^* = (X^T X)^{-1} X^T y $$ 若 $X^T X$ 不满秩，则可解出多个 $w$ 若可解出多个解，可以引入正则化得到唯一解\n","date":"2025-04-27T18:15:36+08:00","image":"https://backupenable.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%85%A5%E9%97%A8-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%921/%E5%B9%B3%E6%B3%BD%E5%94%AF_hu8592607334598026443.jpg","permalink":"https://backupenable.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%85%A5%E9%97%A8-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%921/","title":"机器学习 入门 线性回归(1)"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://backupenable.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu4699868770670889127.jpg","permalink":"https://backupenable.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://backupenable.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"https://backupenable.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://backupenable.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu10664154974910995856.jpg","permalink":"https://backupenable.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://backupenable.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://backupenable.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"https://backupenable.github.io/p/emoji-support/","title":"Emoji Support"}]